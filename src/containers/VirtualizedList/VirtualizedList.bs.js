// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var Css = require("bs-css/src/Css.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Belt_HashMapInt = require("bs-platform/lib/js/belt_HashMapInt.js");

function scrollTop(prim) {
  return prim.scrollTop;
}

function VirtualizedList(Props) {
  var match = Props.bufferCount;
  var bufferCount = match !== undefined ? match : 5;
  Props.defaultHeight;
  var data = Props.data;
  var identity = Props.identity;
  var viewPortRef = Props.viewPortRef;
  var renderItem = Props.renderItem;
  var match$1 = React.useState((function () {
          return 0;
        }));
  var setStartIndex = match$1[1];
  var startIndex = match$1[0];
  var match$2 = React.useState((function () {
          return 10;
        }));
  var setEndindex = match$2[1];
  var endIndex = match$2[0];
  var refMap = React.useRef(Belt_HashMapInt.make(100));
  React.useRef(Belt_HashMapInt.make(100));
  React.useEffect((function () {
          Belt_Option.map(Belt_Option.map(Caml_option.nullable_to_opt(viewPortRef.current), (function (prim) {
                      return prim;
                    })), (function (element) {
                  element.addEventListener("scroll", (function (_e) {
                          Curry._1(setStartIndex, (function (_prev) {
                                  var value = element.scrollTop / 200 | 0;
                                  var match = (value - bufferCount | 0) < 0;
                                  if (match) {
                                    return 0;
                                  } else {
                                    return value - bufferCount | 0;
                                  }
                                }));
                          return Curry._1(setEndindex, (function (_prev) {
                                        var value = (element.scrollTop + element.clientHeight) / 200 | 0;
                                        var match = (value + bufferCount | 0) >= 25;
                                        if (match) {
                                          return 26;
                                        } else {
                                          return value + bufferCount | 0;
                                        }
                                      }));
                        }));
                  return /* () */0;
                }));
          return (function (param) {
                    Belt_Option.map(Belt_Option.map(Caml_option.nullable_to_opt(viewPortRef.current), (function (prim) {
                                return prim;
                              })), (function (element) {
                            element.removeEventListener("scroll", (function (_e) {
                                    return /* () */0;
                                  }));
                            return /* () */0;
                          }));
                    return /* () */0;
                  });
        }), /* array */[]);
  React.useEffect((function () {
          return undefined;
        }), /* array */[]);
  return React.createElement(React.Fragment, {
              children: React.createElement("div", undefined, React.createElement("div", {
                        className: Css.style(/* :: */[
                              Css.paddingTop(Css.px(Caml_int32.imul(startIndex, 200))),
                              /* :: */[
                                Css.paddingBottom(Css.px(Caml_int32.imul(data.length - endIndex | 0, 200))),
                                /* [] */0
                              ]
                            ])
                      }, Belt_Array.map(Belt_Array.map(Belt_Array.slice(data, startIndex, endIndex - startIndex | 0), (function (item) {
                                  return /* tuple */[
                                          Curry._1(renderItem, item),
                                          Curry._1(identity, item)
                                        ];
                                })), (function (itemTuple) {
                              var id = itemTuple[1];
                              return React.cloneElement(itemTuple[0], {
                                          ref: (function (elementRef) {
                                              return Belt_HashMapInt.set(refMap.current, id, elementRef);
                                            })
                                        });
                            }))))
            });
}

var make = VirtualizedList;

exports.scrollTop = scrollTop;
exports.make = make;
/* Css Not a pure module */
